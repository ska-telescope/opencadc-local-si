---
- hosts: localhost
  vars_files:
    - vars.yaml
  tasks:

  - name: Show ansible_python_interpreter
    debug:
      var: ansible_python_interpreter

  - name: Set dependency package names for Debian
    set_fact:
      dependency_packages:
        - python-crypto
        - python3-pip
        - docker.io
        - acl
    when: ansible_os_family == "Debian"

  - name: Set package names for RedHat
    set_fact:
      dependency_packages:
        - python3.11-pip # ansible has python3.11 as a dependency (instead of just python3, which would have been sane)
        - python3.11-setuptools
        - docker-ce
        - acl
    when: ansible_os_family == "RedHat"

  - name: Install dependencies
    become: yes
    ansible.builtin.package:
      name: "{{ dependency_packages }}"
      state: present

  - name: Install Python bcoz docker SDK
    package:
      name: "python3"
      state: present

  - name: Check docker sdk installed or not
    command: "pip3 list | grep docker"
    register: docker_sdk

  - name: Install Docker Module for Python
    become: yes
    pip:
      name: docker

#  - name: creating {{CONFIG_FOLDER}}
#    become: yes
#    ansible.builtin.file:
#      path: "{{CONFIG_FOLDER}}"
#      state: directory
#      mode: 0775

  - name: creating {{CERTIFICATES_FOLDER}}
    become: yes
    ansible.builtin.file:
      path: "{{CERTIFICATES_FOLDER}}"
      state: directory
      mode: 0775

  - name: creating {{LOGS_FOLDER}}
    become: yes
    ansible.builtin.file:
      path: "{{LOGS_FOLDER}}"
      state: directory
      mode: 0775

  - name: creating {{DATA_DIR}}
    become: yes
    ansible.builtin.file:
      path: "{{DATA_DIR}}"
      state: directory
      mode: 0775

  - name: set permissions on {{DATA_DIR}}
    command: "setfacl -m user:8675309:rwx {{DATA_DIR}}"

#  - name: Clone repo with configs
#    become: yes
#    ansible.builtin.git:
#      repo: "{{GIT_REPO}}"
#      dest:  "{{CONFIG_FOLDER}}"
#      version: "{{GIT_VERSION}}"
#    ignore_errors: True

  - name: Start docker
    service:
      name: docker
      state: started

#  - name: Start podman service on RedHat-based OS
#    when: ansible_os_family == "RedHat"
#    service:
#      name: podman.socket
#      state: started

  - name: Pull {{POSTGRESQL_IMAGE}}
    become: yes
    docker_image:
      name: "{{POSTGRESQL_IMAGE}}"
      source: pull

  - name: Pull {{HAPROXY_IMAGE}}
    become: yes
    docker_image:
      name: "{{HAPROXY_IMAGE}}"
      source: pull

  - name: Pull minoc:{{MINOC_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/minoc:{{MINOC_VERSION}}"
      source: pull

  - name: Pull tantar:{{TANTAR_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/tantar:{{TANTAR_VERSION}}"
      source: pull

  - name: Pull ratik:{{RATIK_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/ratik:{{RATIK_VERSION}}"
      source: pull

  - name: Pull fenwick:{{FENWICK_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/fenwick:{{FENWICK_VERSION}}"
      source: pull

  - name: Pull critwall:{{CRITWALL_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/critwall:{{CRITWALL_VERSION}}"
      source: pull

  - name: Pull luskan:{{LUSKAN_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/luskan:{{LUSKAN_VERSION}}"
      source: pull

  - name: Create user-defined bridge network
    become: yes
    docker_network:
      name: si-network

  - name: Launch {{POSTGRESQL_IMAGE}}:latest
    become: yes
    docker_container:
      name: pg12db
      image: "{{POSTGRESQL_IMAGE}}:latest"
      ports:
        - "5432:5432"
      volumes:
        - "{{CONFIG_FOLDER}}/config/postgresql:/config:ro"
        - "{{LOGS_FOLDER}}:/logs:rw"
      networks:
        - name: si-network
      state: started
  - name: pause for postgresl
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS_LONG | int }}"

  - name: Launch minoc
    become: yes
    docker_container:
      name: minoc
      image: "{{SI_REPO_PATH}}/minoc:{{MINOC_VERSION}}"
      user: "tomcat:tomcat"
      volumes:
        - "{{CONFIG_FOLDER}}/config/minoc:/config:ro"
        - "{{DATA_DIR}}:/data:rw"
      networks:
        - name: si-network
      state: started

  - name: pause for wait to minoc
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch luskan
    become: yes
    docker_container:
      name: luskan
      image: "{{SI_REPO_PATH}}/luskan:{{LUSKAN_VERSION}}"
      user: "tomcat:tomcat"
      volumes:
        - "{{CONFIG_FOLDER}}/config/luskan:/config:ro"
      networks:
        - name: si-network
      state: started

  - name: pause for wait to luskan
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch tantar
    become: yes
    docker_container:
      name: tantar
      image: "{{SI_REPO_PATH}}/tantar:{{TANTAR_VERSION}}"
      user: "opencadc:opencadc"
      volumes:
        - "{{CONFIG_FOLDER}}/config/tantar:/config:ro"
        - "{{DATA_DIR}}:/data:rw"
      networks:
        - name: si-network
      state: started

  - name: pause for wait to tantar
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch ratik
    become: yes
    docker_container:
      name: ratik
      image: "{{SI_REPO_PATH}}/ratik:{{RATIK_VERSION}}"
      user: "opencadc:opencadc"
      volumes:
        - "{{CONFIG_FOLDER}}/config/ratik:/config:ro"
      networks:
        - name: si-network
      state: started

  - name: pause for wait to ratik
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch fenwick
    become: yes
    docker_container:
      name: fenwick
      image: "{{SI_REPO_PATH}}/fenwick:{{FENWICK_VERSION}}"
      user: "opencadc:opencadc"
      volumes:
        - "{{CONFIG_FOLDER}}/config/fenwick:/config:ro"
      networks:
        - name: si-network
      state: started

  - name: pause for wait to fenwick
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch critwall
    become: yes
    docker_container:
      name: critwall
      image: "{{SI_REPO_PATH}}/critwall:{{CRITWALL_VERSION}}"
      user: "opencadc:opencadc"
      volumes:
        - "{{CONFIG_FOLDER}}/config/critwall:/config:ro"
        - "{{DATA_DIR}}:/data:rw"
      networks:
        - name: si-network
      state: started

  - name: pause for wait to critwall
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch {{HAPROXY_IMAGE}}
    become: yes
    docker_container:
      name: haproxy
      image: "{{HAPROXY_IMAGE}}:latest"
      ports:
        - "{{HAPROXY_EXPOSED_PORT}}:443"
      volumes:
        - "{{LOGS_FOLDER}}:/logs:rw"
        - "{{CERTIFICATES_FOLDER}}:/config:ro"
        - "{{CONFIG_FOLDER}}/config/haproxy:/usr/local/etc/haproxy/:rw"
      networks:
        - name: si-network
      command: haproxy -V -f /usr/local/etc/haproxy/haproxy.cfg
      state: started
