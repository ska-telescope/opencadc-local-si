org.opencadc.ratik.logging = info
#debug

# inventory database settings
org.opencadc.inventory.db.SQLGenerator=org.opencadc.inventory.db.SQLGenerator
org.opencadc.ratik.inventory.schema=inventory
org.opencadc.ratik.inventory.username=cadmin
org.opencadc.ratik.inventory.password=pw-cadmin
org.opencadc.ratik.inventory.url=jdbc:postgresql://pg12db/minocdb

# artifact uri bucket filter
org.opencadc.ratik.buckets=9-f
#- same as tantar; always HEX buckets as defined in the URI bucket; artifact has a URI bucket value.
# random hex characters that allow you to subdivide work load. 5 chars long -- up to 10^6 buckets.. 
# {uriBucket prefix or range of prefixes}

# selectivity
org.opencadc.ratik.artifactSelector=filter

# remote inventory query service (luskan) --
# -- point at luskan at local storage site if run in global(i.e. the remote)
# -- if run in local point at luskan at global site
#org.opencadc.ratik.queryService= ivo://espsrc.iaa.csic.es/luskan

org.opencadc.ratik.queryService = ivo://skao.int/luskan
# skao.int is just a placeholder here -- some organisation that takes care of the service registry; just a label
#{resourceID of remote TAP service with inventory data model}

# local site type, true = global site, false = storage site
org.opencadc.ratik.trackSiteLocations=false

# ratik does metadata validataion between local and reomte invntory database; does validation and fixes local in case of discrepencies
# whereever you run fenwick you also run ratik.
# you validate the local db here against remote db;
# also runs on local sites if they're syncing with global
# fenwick points at each local fenwick as remote

# fenwick vs. ratik: fenwick incremental sync while ratik is full validation; all metadata while tanta is data.
